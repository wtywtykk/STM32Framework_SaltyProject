LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;

ENTITY PeripheralBridge IS
	PORT(
		PeripReset:OUT STD_LOGIC;
		PeripResetMCUOut:IN STD_LOGIC;
		
		TIM_HS1:IN STD_LOGIC;
		TIM_HS2:IN STD_LOGIC;
		
		ADCNVST:OUT STD_LOGIC;
		ADCS:OUT STD_LOGIC;
		ADRD:OUT STD_LOGIC;
		ADBusy:IN STD_LOGIC;
		ADCtrl:OUT STD_LOGIC_VECTOR(6 DOWNTO 1);
		AD:IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		
		DACLK:OUT STD_LOGIC;
		DAData:OUT STD_LOGIC_VECTOR(13 DOWNTO 0);
		DACtrl:OUT STD_LOGIC_VECTOR(2 DOWNTO 1);
		
		NE:IN STD_LOGIC;
		NOE:IN STD_LOGIC;
		NWE:IN STD_LOGIC;
		FSMCADD:IN STD_LOGIC_VECTOR(5 DOWNTO 0);
		FSMCDATA:INOUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		
		NEEXT:OUT STD_LOGIC;
		
		BridClk:IN STD_LOGIC;
		BridInt:OUT STD_LOGIC
	);
END ENTITY PeripheralBridge;

ARCHITECTURE Behavioral OF PeripheralBridge IS

COMPONENT ResetController IS
	PORT(
		ResetOut:OUT STD_LOGIC;
		ResetIn:IN STD_LOGIC
	);
END COMPONENT ResetController;

COMPONENT FreqDivider IS
	GENERIC(
		MaxDivision:INTEGER:=64
	);
	PORT(
		Divider:INTEGER RANGE 0 TO MaxDivision;
		ClkIn:IN STD_LOGIC;
		ClkOut:BUFFER STD_LOGIC
	);
END COMPONENT FreqDivider;

COMPONENT DACController IS
	PORT(		
		DACLK:OUT STD_LOGIC;
		DAData:OUT STD_LOGIC_VECTOR(13 DOWNTO 0);
		DACtrl:OUT STD_LOGIC_VECTOR(2 DOWNTO 1);
		
		BridClk:IN STD_LOGIC;
		Data:IN STD_LOGIC_VECTOR(13 DOWNTO 0);
		DataCommit:IN STD_LOGIC;
		CtrlCommit:IN STD_LOGIC
	);
END COMPONENT DACController;

SIGNAL ADBuf:STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL AddrCorrect:STD_LOGIC;
SIGNAL Selected:STD_LOGIC;
SIGNAL Osc:STD_LOGIC;

SIGNAL OscDivider:INTEGER RANGE 0 TO 65535;
BEGIN

ResetCtrl:ResetController
	PORT MAP(ResetOut=>PeripReset,ResetIn=>PeripResetMCUOut);
LEDDivider:FreqDivider
	GENERIC MAP(MaxDivision=>64)
	PORT MAP(Divider=>2,ClkIn=>BridClk,ClkOut=>BridInt);
DACCtrl:DACController
	PORT MAP(DACLK=>DACLK,DAData=>DAData,DACtrl=>DACtrl,BridClk=>BridClk,Data=>"00000000000000",DataCommit=>'0',CtrlCommit=>'0');

PROCESS(NOE)
BEGIN
	IF Selected='1' AND NOE='0' THEN
		IF NOE='0' AND NOE'EVENT THEN
			FSMCDATA<=ADBuf;
		END IF;
	ELSE
		FSMCDATA<="ZZZZZZZZZZZZZZZZ";
	END IF;
END PROCESS;

PROCESS(NWE)
BEGIN
	IF Selected='1' THEN
		IF NWE='0' AND NWE'EVENT THEN
			--DA<=FSMCDATA(13 DOWNTO 0);
		END IF;
	END IF;
END PROCESS;

PROCESS(FSMCADD)
BEGIN
	IF (FSMCADD AND "100000")="100000" THEN
		AddrCorrect<='1';
	ELSE
		AddrCorrect<='0';
	END IF;
END PROCESS;

PROCESS(AddrCorrect,NE)
BEGIN
	Selected<=AddrCorrect AND NE;
	NEEXT<=NOT AddrCorrect AND NE;
END PROCESS;

END Behavioral;

